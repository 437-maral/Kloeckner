# -*- coding: utf-8 -*-
"""cleaned.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TpSvaHahvc_f44oVMgACHQfgnGMT-KTu
"""

import pandas as pd
import re

!git clone https://maral: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@github.com/437-maral/KCI.git

kci_data = pd.read_excel("KCI/kci-excel.xlsx")

kci_data["doc type"].unique()

#remove duplicates
kci_data=kci_data.drop_duplicates(subset="document ID")
#same format for doc type
non_rfq=['RQF','QR','Quotation Request ', '\nQuotation Request','Quotation Request ']
non_order = ['PO', 'purchase Order', 'Purchase Order', 'Purchase Order ']

for idx, clmn in kci_data["doc type"].items():
    if clmn in non_rfq:
        kci_data.loc[idx, "doc type"] = 'RFQ'
    elif clmn in non_order:
        kci_data.loc[idx, "doc type"] = 'ORDER'

kci_data["doc type"].unique()

#use lower case for all unit-quantity
kci_data.iloc[:,7:] = kci_data.iloc[:,7:].applymap(lambda x: x.lower() if isinstance(x, str) else x)

#unit-quantity
kilo=['kg','kilogramm','kgm','kilogram30','koilgram','kg ','kilogram','kilogram40']
pce=['stk', 'tafel', 'stück', 't','st','pce', 'stuck','tfl', 'stck.', 'tafl','srangen','not mentioned'
,'tf','no units', 'stangen','packet','pak', 'paket ','paket','to','stck','psch','stab','tafeln','stueck','bund','wp','tafel ']
meter=['m','mtr','lfm','m ','meter']
m2=['m2','m² ','m²','m2 ']
mmt=['mm']
# for each column
colnms_un = r'li\d+_unit'

for col in kci_data.columns[7:]:
    if re.match(colnms_un, col):
      for i, value in kci_data[col].items():
        if value in kilo:
          kci_data.at[i, col] = "KGM"
        elif value in pce:
          kci_data.at[i, col] = "PCE"
        elif value in meter:
          kci_data.at[i, col] = "MTR"
        elif value in m2:
          kci_data.at[i, col] = "MTk"
        elif value in mmt:
          kci_data.at[i, col] = "MMT"

kci_data

#if i have 5000 x 3125 , give me 5
colnms_qty = r'li\d+_qty'
wrong_quan = r'(\d+)\s*x\s*(\d+)'
for col in kci_data.columns[7:]:
    if re.match(colnms_qty, col):
        for ix, vlue in kci_data[col].items():
            match = re.match(wrong_quan, str(vlue))
            if match:
              corrected_value = int(str(vlue)[0])
              kci_data.at[ix, col] = corrected_value

#store as cleaned data
kci_data['po date'] = kci_data['po date'].dt.strftime('%Y-%m-%d')
kci_data.to_excel('output.xlsx', index=False)